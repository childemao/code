#include<iostream>
using namespace std;

//typedef struct listnode {
//	int val;
//	struct listnode* next;
//}listnode;

////判断带环，即双指针，一个走一步，一个走两步，相遇即带环
//listnode* hascycle(struct listnode* head)
//{
//	if (head == nullptr)
//		return nullptr;
//
//	listnode* fast = head;
//	listnode* slow = head;
//
//	do
//	{//走两步
//		fast = fast->next;
//		if (fast == nullptr)
//		{
//			return nullptr;
//		}
//		fast = fast->next;
//	
//		if (fast == nullptr)
//			{
//			return nullptr;
//			}
//		slow = slow->next;//走一步
//
//	} while (fast != slow);//相等的话，说明带环
//
//	listnode* p1 = head;
//	listnode* p2 = slow;
//
//	while (p1 != p2)//一个从头节点出发，一个从相遇点出发，两个指针相等，即为环的入口
//	{
//		p1 = p1->next;
//		p2 = p2->next;
//	}
//	return p1;
//}




typedef struct Node {
	char value;
	struct Node* left;	// 指向我的左孩子
	struct Node* right;	// 指向我的右孩子
}	Node;
#include <queue>



void levelOrderTraversal(Node* root) {
	if (root == NULL) {
		return;
	}
	std::queue<Node*>	q;
	q.push(root);

	while (!q.empty()) {
		Node* front = q.front(); q.pop();

		printf("%c ", front->value);

		if (front->left != NULL) {
			q.push(front->left);
		}

		if (front->right != NULL) {
			q.push(front->right);
		}
	}
}
