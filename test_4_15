Node* reverseList(Node* head) {
	Node* rHead = NULL;
	Node* cur = head;
	while (cur != NULL) {
		Node* next = cur->next;
		cur->next = rHead;// 头插，结点的next是rhead；
		rHead = cur;
		cur = next;
	}
	return rHead;
}
//删除链表中相同的值，用双指针，val相同，就跳过此元素，最后判断首元素
Node* removeElements_1(Node* head, int val) {
	if (head == NULL)
		return NULL;
	Node * prev = head;
	Node * cur = head->next;
	while (cur != NULL) {
		if (cur->val == val) {
			prev->next = cur->next;
		}
		else {
			prev = cur;
		}
		cur = cur->next;
	}
	if (head->val == val) {
		return head->next;
	}
	else {
		return head;
	}
}
// 删除链表中所有的 val
// 遇到不等于 val 的，就尾插到另一个链表中
Node* removeElements_2(Node* head, int val) {
	Node* rhead = NULL;
	Node* cur = head;
	Node* last = NULL;//记录rhead的最后一个结点
	while (cur != NULL) {
		Node* next = cur->next;
		if (cur->val != val) {
			if (rhead == NULL) {
				cur->next = rhead;
				rhead = cur;
			}
			else {
				cur->next = NULL;
				last->next = cur;
			}
			last = cur;
		}
		cur = next;
	}
	return rhead;
}
