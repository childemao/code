/*
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否
可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如
序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列,
但4,3,5,1,2就不可能是该压栈序列的弹出序列。
（注意：这两个序列的长度是相等的）
*/
#include<iostream>
using namespace std;
#include<stack>
#include<vector>
bool IsPopOrder(vector<int> pushV, vector<int> popV)
{
	if (pushV.size() != popV.size())
		return false;
	stack<int> s;
	int i = 0;
	int j = 0;
	while (j < popV.size())
	{
		while (s.empty() || s.top() != popV[j])//不等，便入栈
		{
			if (i < popV.size()) //自己范围内
			{
				s.push(pushV[i++]);
			}
			else
				return false;
		}
		s.pop();
		j++;
	}
	return true;
}
int main()
{
	vector<int> v1;
	vector<int> v2;
	string s;
	v1 = { 1,2,3,4,5 };
	v2 = { 4,5,3,2,1 };
	IsPopOrder(v1, v2);
	return 0;
}
