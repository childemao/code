#include<iostream>
using namespace std;


enum Color{RED,BLACK};
template<class T>
struct RBTreeNode
{
	RBTreeNode(const T& data = T(),Color color = RED)
		:_pLeft(nullptr)
		,_pRight(nullptr)
		,_pParent(nullptr)
		,_data(data)
        ,_color(color)
	{}
	RBTreeNode<T>* _pLeft;
	RBTreeNode<T>* _pRight;
	RBTreeNode<T>* _pParent;
	T _data;
	Color _color;
};

template<class T>
class RBTree
{
	typedef RBTreeNode<T> Node;
public:
	RBTree()
	{
		_pHead = new Node;
		_pHead->_pLeft = _pHead;
		_pHead->_pRight = _pHead;
	}
	bool Insert(const T& data)
	{
		Node* pRoot = GetRoot();
		if (nullptr == pRoot)
		{
			pRoot = new Node(data);
			pRoot->_pParent = _pHead;
			return true;
		}
		else
		{
			Node* pCur = pRoot;
			Node* pParent = nullptr;
			while (pCur)
			{
				pParent = pCur;
				if (data < pCur->_data)
					pCur = pCur->_pLeft;
				else if (data > pCur->_data)
					pCur = pCur->_pRight;
				else
					return false;
			}
			pCur = new Node(data);
			if (data < pParent->_data)
				pParent->_pLeft = pCur;
			else
				pParent->_pRight = pCur;

			pCur->_pParent = pParent;

			while (pParent != _pHead && pParent->_color == RED)
			{
				Node* GrandFather = pParent->_pParent;
				if (pParent == GrandFather->_pLeft)
				{
					Node* uncle = GrandFather->_pRight;
					if (uncle && RED == uncle->_color)
					{
						//情况一：
						pParent->_color = BLACK;
						uncle->_color = BLACK;
						GrandFather->_color = RED;
						pCur = GrandFather;
						pParent = pCur->_pParent;
					}
					else//叔叔节点不存在 || 存在为黑色
					{
						if (pCur == pParent->_pRight)
						{//情况三：
							RotateL(pParent);
							swap(pCur, pParent);
						}
						//情况二：
						pParent->_color = BLACK;
						GrandFather->_color = RED;
						RotateR(GrandFather);
					}

				}
				else
				{
					//情况一二三的反情况
					Node* uncle = GrandFather->_pLeft;
					if (uncle && RED == uncle->_color)
					{
						pParent->_color = BLACK;
						uncle->_color = BLACK;
						GrandFather->_color = RED;
						pCur = GrandFather;
						GrandFather = pCur->_pParent;
					}
					else
					{//叔叔节点不存在或存在且为黑
						if (pCur == pParent->_pLeft)
						{
							RotateR(pParent);
							swap(pCur,pParent);
						}
						pParent->_color = BLACK;
						GrandFather->_color = RED;
						RotateL(GrandFather);

					}
				}
			}
		}
		pRoot->_color = BLACK;
		_pHead->_pLeft = LeftMost();
		_pHead->_pRight = RightMost();
		return true;
	}
	Node*& GetRoot()
	{
		return _pHead->_pParent;
	}
	void InOrder()
	{
		_InOrder(GetRoot());
	}
	Node* LeftMost()
	{
		Node* pRoot = GetRoot();
			return _pHead;
		Node* pCur = pRoot;
		while (pCur->_pLeft)
			pCur = pCur->_pLeft;

		return pCur;
	}
	Node* RightMost()
	{
		Node* pRoot = GetRoot();
		if (nullptr == pRoot)
			return _pHead;

		Node* pCur = pRoot;
		while (pCur->_pRight)
			pCur = pCur->_pRight;

		return pCur;
	}
	bool IsVlidRBTRee()
	{
		Node* pRoot = GetRoot();
		 if(nullptr == pRoot)
			return true;

		if (pRoot->_color != BLACK)
		{
			cout << "违反性质一：根节点是黑色" << endl;
			return false;
		}

		size_t blackCount = 0;
		Node* pCur = pRoot;
		while (pCur)
		{
			if (pCur->_color == BLACK)
				blackCount++;
			pCur = pCur->_pLeft;
		}

		size_t pathBlack = 0;
		return _IsValidRBTRee(pRoot,blackCount, pathBlack);
	}
	private:
		bool _IsValidRBTRee(Node* pRoot, size_t blackCount, size_t pathBlack)
		{
			if (nullptr == pRoot)
				return true;
			if (pRoot->_color == BLACK)
				pathBlack++;

			Node* pParent = pRoot->_pParent;
			if (pParent != _pHead && RED == pParent->_color
				&& RED == pRoot->_color)
			{
				cout << "违反性质3：不能存在连在一起的红色节点" << endl;
				return false;
			}
			if (nullptr == pRoot->_pLeft && nullptr == pRoot->_pRight)
			{
				if (pathBlack != blackCount)
				{
					cout << "违反性质四：每条路径中黑色节点个数相同" << endl;
					return false;
				}
			}
			return _IsValidRBTRee(pRoot->_pLeft, blackCount, pathBlack) &&
				_IsValidRBTRee(pRoot->_pRight, blackCount, pathBlack);
		}
		void _InOrder(Node* pRoot)
		{
			if (pRoot)
			{
				_InOrder(pRoot->_pLeft);
				cout << pRoot->_data << " ";
				_InOrder(pRoot->_pRight);
			}
		}
		void RotateL(Node* pParent)
		{
			Node* pSubR = pParent->_pRight;
			Node* pSubRL = pSubR->_pLeft;

			pParent->_pRight = pSubRL;
			if (pSubRL)
				pSubRL->_pParent = pParent;

			pSubR->_pParent = pParent;
			Node* pPParent = pParent->_pParent;
			pSubR->_pParent = pPParent;
			pParent->_pParent = pSubR;

			if (pPParent == _pHead)
				_pHead->_pParent = pSubR;
			else
			{
				if (pPParent->_pLeft = pParent)
					pPParent->_pLeft = pSubR;
				else
					pPParent->_pRight = pSubR;
			}
		}
		void RotateR(Node* pParent)
		{
			Node* pSubL = pParent->_pLeft;
			Node* pSubLR = pSubL->_pRight;

			pParent->_pLeft = pSubLR;
			if (pSubLR)
				pSubLR->_pParent = pParent;

			pSubL->_pRight = pParent;

			Node* pPParent = pParent->_pParent;
			pParent->_pParent = pSubL;
			pSubL->_pParent = pPParent;

			if (pPParent == _pHead)
				_pHead->_pParent = pSubL;
			else
			{
				if (pParent == pPParent->_pLeft)
					pPParent->_pLeft = pSubL;
				else
					pPParent->_pRight = pSubL;
			}
		}
private:
	Node* _pHead;
};

void TestRBTree()
{
	int a[] = { 5,3,4,1,7,8,2,6,0,9 };
	RBTree<int> t;
	for (auto e : a)
		t.Insert(e);

	t.InOrder();
	cout << endl;

	cout << t.LeftMost()->_data << endl;
	cout << t.RightMost()->_data << endl;

	if (t.IsVlidRBTRee())
		cout << "t is RBTree" << endl;
	else
		cout << "t is not RBTree " << endl;
}

int main()
{
	TestRBTree();
	return 0;
}
